<?php

require_once(dirname(__FILE__).'/vku_show_items.php');
require_once(dirname(__FILE__).'/pages/edit-types.php');

/**
 * Drupal Menu Hook
 * Adds Menu Items to the Menu
 */
function vkuconnection_menu(){

 $items['vku/%/add'] = array(
      'access callback' => 'lk_vku_access',
      'page callback' => '_vkuconn_generate',
      'page arguments' => array(1),
      'title' => 'VKU-Entries add',
      'type' => MENU_CONTEXT_NONE);  
 
 $items['vku/create/vorlage'] = array(
      'access callback' => 'lk_vku_access',
      'page callback' => 'vkuconnection_create_vorlage',
      'page arguments' => array(),
      'file' => 'pages/vkuconnection_create_vorlage.php',
      'title' => 'VKU-Vorlage callback',
      'type' => MENU_CONTEXT_NONE);  


  $items['vku/%/addextra/%'] = array(
      'access callback' => 'lk_vku_access',
      'page callback' => '_vkuconn_add_docuement',
      'page arguments' => array(1, 3),
      'file' => 'adddocument.php',
      'title' => 'VKU-Entries add',
      'type' => MENU_CONTEXT_NONE);  
  
  $items['vku/%/template/%'] = array(
      'access callback' => 'lk_vku_access',
      'page callback' => 'vkuconnection_takeover_vorlage',
      'page arguments' => array(1, 3),
      'file' => 'pages/vkuconnection_takeover_vorlage.php',
      'title' => 'VKU-Entries add',
      'type' => MENU_CONTEXT_NONE);  
  
  $items['preview-template/%'] = array(
      'access callback' => 'lk_vku_access',
      'page callback' => '_vkuconn_preview_document',
      'page arguments' => array(1),
      'file' => 'preview.php',
      'title' => 'VKU-Entries add',
      'type' => MENU_CONTEXT_NONE);   

  $items['user/%user/vkusettings'] = array(
      'access callback' => 'lk_vku_access',
      'page callback' => 'vkuconn_settings',
      'page arguments' => array(1),
      'file' => 'settings.php',
      'title' => 'VKU-Einstellungen',
      'type' => MENU_CONTEXT_NONE);   

  
return $items;
}






/**
 * Entity Hook
 * Removes faulty entries in the Database, when Region VKUExtras are deleted
 * 
 * @entity Object 
 * @type String Type
 */
function vkuconnection_entity_delete($entity, $type){
    if($type == 'vkuaddon'){
        if($entity -> type == 'vkuaddon_region'){
            $dbq = db_query("DELETE FROM lk_vku_data WHERE data_module='vkuaddon' AND data_class='region'");
        }
        
    }
}


/**
 * Helper for cloning entities
 * @entity Existing entity
 * @return Object Entity
 * 
 */
function _vkuclone_item($entity){
global $user;
  
    $title = $entity -> title;    

    $new_entity = eck_clone_clone_entity($entity, $user);
    $new_entity -> verlag = 0;
    $new_entity -> created = time();
    $new_entity -> changed = time();
    $new_entity -> title = $title;
    $new_entity -> favorit = 0;
    entity_save($new_entity->type, $new_entity);

    return $new_entity;
}

/**
 * Remove a Entity from the Database because it's used as a Copy and unique in the VKU
 * HOOK from the VKUData-Class
 * 
 * @type Type of the Entity
 * @data complete Data-Array of the VKU-Data-Entry
 */
function remove_vku_addon_vkuaddon($type, $data){
  if(in_array($type, array("text", 'preise', 'vkuaddon_mediencol'))){
      $id = $data["data_entity_id"];

      // Remove entity
      $entity = entity_load_single('vkuaddon', $id);
      if($entity){
          entity_delete('vkuaddon', $id);
      }
  }

}


function form_redirect_to_vku($form, &$form_state){
  drupal_get_messages();
  
  if(isset($_GET["destination"])){
    unset($_GET["destination"]);
  }
  
  if($form_state["values"]["op"] == 'Vorschau'){
      drupal_set_message("Das Dokumente wurde gespeichert. Bitte überprüfen Sie nun die korrekte Ausgabe im PDF.");
      drupal_goto("vku/" . arg(1) . "/edit/"  . arg(3), array("query" => array("preview" => 1)));
  }
  else {
     drupal_set_message("Das Dokument wurde gespeichert.");
     drupal_goto("vku/" . arg(1));
  }
}


function copy_vku_item_vkuaddon($data_obj, $item){
    if(in_array($item["data_module"], array("text", 'preise', 'vkuaddon_mediencol'))){
        // Clone
       $entity = entity_load_single('vkuaddon', $item["data_entity_id"]);
       $new = _vkuclone_item($entity);
       $item["data_entity_id"] = $new -> id;
    }
}

function add_vkuextras_js(){
  drupal_add_css(drupal_get_path('module', 'vkuaddon') . '/css/admin.css');
  drupal_add_js(drupal_get_path('module', 'vkuaddon') . '/trumbowyg/trumbowyg.min.js');
  drupal_add_css(drupal_get_path('module', 'vkuaddon') . '/trumbowyg/ui/trumbowyg.min.css');
  drupal_add_js(drupal_get_path('module', 'vkuaddon') . '/js/enable_editors.js');
}

function vkuconnection_theme(){

 $themes = array ();
 
 $themes['vkuconnection_add'] = array(
            'template' => 'templates/vkuconnection_add', // your template file called custompage.tpl.php
            'variables' => array(
              'vku' => NULL,
              'items' => array()
            ),
        );
 
 $themes['vkuconnection_settings'] = array(
            'template' => 'templates/vkuconnection_settings', // your template file called custompage.tpl.php
            'variables' => array(
              'items' => array()
            ),
        );
 
 
 
 return $themes;
}


function vku_create_item_desc_vkuaddon(&$item, $vku){

  $entity_id = $item["data_entity_id"];
  $entity = entity_load_single('vkuaddon', $entity_id);
  if(!$entity) return ;
  $vku_id = $vku -> getId();  
  $item["candelete"] = true;

  switch($entity -> type){
    case 'vkuaddon_region':
      $item["short"] = 'Regional';
      $item["title"] = 'Regionalargumentation';
      $item["desc"] = $entity -> title; 
      break;

    case 'vkuaddon_text':
      $item["short"] = 'Text';
      $item["title"] = 'Textblock';
      $item["desc"] = $entity -> title; 
      $item["canedit"] = true;
      $item['edit'] = 'vku/' . $vku_id .'/edit/' . $item['id'];
      $item['edit_title'] = 'Textblock editieren';
      break;  

    case 'vkuaddon_preise':
      $item["short"] = 'Preise';
      $item["title"] = 'Preiskalkulation';
      $item["desc"] = $entity -> title; 
      $item["canedit"] = true;
      $item['edit'] = 'vku/' . $vku_id .'/edit/' . $item['id'];
      $item['edit_title'] = 'Preiskalkulation editieren';
      break;    
  
   case 'vkuaddon_mediencol':
      $item["short"] = 'Medien';
      $item["title"] = 'Medienargumentationen (bis zur 3 verschiedene pro Seite)';
      $item["desc"] = $entity -> title; 
      $item["canedit"] = true;
      $item['edit'] = 'vku/' . $vku_id .'/edit/' . $item['id'];
      $item['edit_title'] = 'Medienargumentation editieren';
      break;    
  }
}


function vku_generate_pdf_vkuaddon($vku, $page, $pdf){
     $entity_id = $page["data_entity_id"];
     $entity = entity_load_single('vkuaddon', $entity_id);
     
     _show_pdf_vkuaddon_entity($entity, $pdf);
}

function _show_pdf_vkuaddon_entity($entity, $pdf){
   require_once('sites/all/modules/lokalkoenig/vkuaddon/pdf/show.inc');
     
   if(!$entity) {
       die("Kein Zugriff");
   } 
   
    if($entity -> type == 'vkuaddon_region'){
        require_once('sites/all/modules/lokalkoenig/vkuaddon/pdf/vkuaddon_region.php');
        $preview = new PDF_vkuaddon_region(); 
     }

     if($entity -> type == 'vkuaddon_text'){
        require_once('sites/all/modules/lokalkoenig/vkuaddon/pdf/vkuaddon_text.php');
        $preview = new PDF_vkuaddon_text(); 
     }

      if($entity -> type == 'vkuaddon_preise'){
        require_once('sites/all/modules/lokalkoenig/vkuaddon/pdf/vkuaddon_preise.php');
        $preview = new PDF_vkuaddon_preise(); 
     }
     
     if($entity -> type == 'vkuaddon_mediencol'){
        require_once('sites/all/modules/lokalkoenig/vkuaddon/pdf/vkuaddon_medien.php');
        $preview = new PDF_vkuaddon_medien(); 
     }


     $preview -> setEntity($entity);
     $preview -> generatePreview($pdf);
}

/** DEPREICATED */
function vku_form_vorlage($form, $form_status, $vku){
    
    $form["#vku"] = $vku -> getId();
    
    $form["title"] = array(
        '#type' => 'textfield',
        '#title' => "Titel Ihrer Vorlage",
        '#default_value' => $vku -> get('vku_template_title'),
        '#required' => true
    );
    
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#attributes' => array('class' => array('btn btn-yellow-arrow')),
      '#value' => 'Speichern',
    );
    
    return $form;
}


/** DEPREICATED */
function vku_form_vorlage_submit($form, &$form_state){
    $vku_id = $form["#vku"];
    $vku = new VKUCreator($vku_id);
    
    $vku -> set("vku_template_title", $form_state["values"]["title"]);
    $vku -> update();
    drupal_set_message("Ihre Vorlage wurde angepasst.");
    drupal_goto($vku -> vku_url());
}


function vkuconnection_get_user_templates($uid = null){
global $user;    
    
    if(!$uid):
        $uid = $user -> uid;
    endif;

    $array = array();
    $dbq = db_query("SELECT vku_template_default, vku_title, vku_template_title, vku_id, vku_changed, uid FROM lk_vku WHERE uid='". $uid ."' AND vku_status='template' ORDER BY vku_changed DESC"); 
    foreach($dbq as $all){
      
       if(empty($all -> vku_title)){
           continue;
       } 
        
      $all -> renew_url = 'user/' . $all -> uid . "/vku/" . $all -> vku_id . "/renew";  
      $array[] = $all;  
    }
    
return $array;    
} 

?>